searchState.loadedDescShard("libautomotive", 0, "libautomotive\nCurrent version of the library\nApplication layer protocols including UDS and OBD-II …\nData link layer handling raw CAN frames\nCommon error types and error handling functionality Error …\nNetwork layer implementing J1939 protocol Network layer …\nPhysical layer implementations for CAN and CAN-FD Physical …\nTransport layer implementing ISO-TP (ISO 15765-2) …\nCommon types used across the library Common types used …\nApplication layer trait that must be implemented by UDS …\nOBD-II Implementation\nOBD-II Configuration\nOBD-II Request Message\nOBD-II Response Message\nOBD-II PID Data\nClears stored DTCs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConverts raw OBD-II data to meaningful values\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads Mode 8 control operation results\nReads stored DTCs\nReads freeze frame data for a specific PID and frame number\nReads freeze frame data and converts it to meaningful …\nReads multiple PIDs in a single request\nReads permanent DTCs (Mode 0x0A)\nReads current sensor data\nReads current sensor data and converts it to meaningful …\nReads Mode 6 test results\nReads vehicle information\nConverts the PID data to a human-readable string\nCreates a new OBD-II instance with the given transport …\nUDS Session Status\nUDS Implementation\nUDS Configuration\nUDS Request Message\nUDS Response Message\nChanges the diagnostic session\nPerforms ECU reset\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPerforms input/output control\nReads data by identifier\nReads memory by address\nPerforms routine control\nPerforms security access\nSends tester present message\nCreates a new UDS instance with the given transport layer\nWrites data by identifier\nWrites memory by address\nCAN bus status\nCAN error frame\nCAN error types\nData link layer trait for raw CAN frame handling\nLocation in frame where error occurred\nFrame type when error occurred\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents all possible errors that can occur in the …\nBuffer capacity exceeded\nErrors related to CAN bus operations\nErrors specific to CAN-FD operations\nChecksum error\nConnection failed in DoIP\nErrors specific to DoIP operations\nContains the error value\nInvalid checksum\nInvalid data received\nInvalid parameter provided to function\nI/O error\nErrors occurring in ISO-TP (ISO 15765-2) protocol\nErrors specific to J1939 protocol operations\nComponent used before initialization\nErrors specific to OBD-II operations\nContains the success value\nError related to hardware port operations\nFailed to receive data in DoIP\nResult type alias for automotive operations\nFailed to send data in DoIP\nOperation timed out\nErrors occurring in UDS (ISO 14229) protocol\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nNetwork layer trait that must be implemented by J1939\nJ1939 implementation\nJ1939 configuration\nJ1939 message structure\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new J1939 instance with the given physical layer\nPhysical layer trait that must be implemented by hardware …\nCAN implementation\nCAN bitrate configurations\nCAN configuration\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet current error counters (TEC, REC)\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nGet number of frames pending in RX queue\nGet space available in RX queue\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet number of frames pending in TX queue\nGet space available in TX queue\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConfigure CAN controller with standard bitrate profile\nCreates a new CAN instance with the given port\nCANFD implementation\nStandard CANFD bit rate profiles\nCANFD configuration\nCANFD controller options\nGet a flags value with all known bits set.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nGet the underlying bits value.\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nWhether all set bits in a source flags value are also set …\nThe intersection of a source flags value with the …\nGet a flags value with all bits unset.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert from a bits value.\nConvert from a bits value exactly.\nConvert from a bits value, unsetting any unknown bits.\nThe bitwise or (<code>|</code>) of the bits in each flags value.\nGet a flags value with the bits of a flag with the given …\nGet current error counters (TEC, REC)\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nThe bitwise and (<code>&amp;</code>) of the bits in two flags values.\nWhether any set bits in a source flags value are also set …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether all known bits in this flags value are set.\nWhether all bits in this flags value are unset.\nYield a set of contained flags values.\nYield a set of contained named flags values.\nThe bitwise negation (<code>!</code>) of the bits in a flags value, …\nThe intersection of a source flags value with the …\nGet number of frames pending in RX queue\nGet space available in RX queue\nCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is …\nThe intersection of a source flags value with the …\nThe intersection of a source flags value with the …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nThe bitwise exclusive-or (<code>^</code>) of the bits in two flags …\nGet number of events pending in TX event queue\nGet number of frames pending in TX queue\nGet space available in TX queue\nThe bitwise or (<code>|</code>) of the bits in two flags values.\nConfigure CANFD controller with standard bitrate profile\nCreates a new CANFD instance with the given port\nRepresents a single Diagnostic Trouble Code (DTC) in the …\nImplements the ISOBUS Diagnostic Protocol according to SAE …\nISO-TP specific transport layer trait\nBase transport layer trait\nAdds or updates a Diagnostic Trouble Code in the …\nClears all active DTCs (DM11 functionality)\nClears a specific DTC identified by its SPN and FMI (DM22 …\nClears all previously active DTCs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns a vector of references to all active DTCs\nReturns a vector of references to all previously active …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new instance of the ISOBUS Diagnostic Protocol …\nCreates a new Diagnostic Trouble Code with default values\nProcesses incoming diagnostic messages according to their …\nControls the broadcasting of DM1 messages (DM13 …\nUpdates the diagnostic state and generates DM1 broadcast …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new DoIP instance with the given physical layer\nISO-TP Address Modes\nISO-TP implementation\nISO-TP configuration\nISO-TP Timing Parameters (in milliseconds)\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new ISO-TP instance with the given physical layer\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReads a LIN response\nSends a LIN header (break, sync, and ID)\nSends a LIN response (data and checksum)\nProtocol-specific addressing information, primarily used …\nCAN identifier type, supporting both standard (11-bit) and …\nConfiguration trait that must be implemented by all …\nGeneric frame structure used across different protocol …\nFrame data type representing the payload of a CAN frame.\nHardware abstraction trait for CAN interfaces.\nTimestamp type representing milliseconds since an …\nFrame payload data\nDestination address of the target node\nReturns the argument unchanged.\nReturns the argument unchanged.\nCAN identifier (11-bit or 29-bit)\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nWhether the frame uses extended (29-bit) identifier\nWhether the frame is a CAN-FD frame\nParameter Group Number (PGN) identifying the message type\nMessage priority (0-7, with 0 being highest priority)\nReceives a frame from the CAN interface.\nSends a frame through the CAN interface.\nSets the timeout for receive operations.\nSource address of the sending node\nTimestamp of frame reception/transmission\nValidates the configuration parameters.")